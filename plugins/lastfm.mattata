--[[
    Copyright 2017 Matthew Hesketh <wrxck0@gmail.com>
    This code is licensed under the MIT. See LICENSE for details.
]]

local lastfm = {}
local mattata = require('mattata')
local http = require('socket.http')
local url = require('socket.url')
local json = require('dkjson')

function lastfm:init(configuration)
    assert(configuration.keys.lastfm, 'lastfm.lua requires an API key, and you haven\'t got one configured!')
    lastfm.commands = mattata.commands(self.info.username):command('lastfm'):command('np').table
    lastfm.help = '/np [username] - If no username is specified and you have a valid username set, the current song you\'re listening to is sent. Otherwise, the current song the specified user is listening to will be sent. Alias: /lastfm.'
end

function lastfm:on_message(message, configuration, language)
    local input = mattata.input(message.text)
    if not input then
        input = mattata.get_value(self, message.from.id, 'last.fm username')
        if not input then
            return mattata.send_reply(message, 'You have not got a Last.fm username set! Set one by using /setlastfm <username>.')
        end
    end
    local timeout = http.TIMEOUT
    http.TIMEOUT = 1
    local jstr, res = http.request('http://ws.audioscrobbler.com/2.0/?method=user.getrecenttracks&format=json&limit=1&api_key=' .. configuration.keys.lastfm .. '&user=' .. url.escape(input))
    http.TIMEOUT = timeout
    if res ~= 200 then
        return mattata.send_reply(message, language.errors.connection)
    end
    local jdat = json.decode(jstr)
    if jdat.error then
        return mattata.send_reply(message, '<b>' .. mattata.escape_html(input) .. '</b> doesn\'t appear to be a valid Last.fm username. Please set one by using /setlastfm <username>.', 'html')
    end
    local track = jdat.recenttracks.track[1] or jdat.recenttracks.track
    if not track then
        return mattata.send_reply(message, '<b>' .. mattata.escape_html(input) .. '</b> does not have any recently played tracks on Last.fm!', 'html')
    end
    local output = input
    if track['@attr'] and track['@attr'].nowplaying then
        output = output .. ' is currently listening to:'
    else
        output = output .. ' last listened to:'
    end
    output = '<b>' .. mattata.escape_html(output) .. '</b>'
    if track.name and #track.name > 0 then
        output = output .. '\nðŸŽµ ' .. mattata.escape_html(track.name)
    else
        output = output .. '\nðŸŽµ Unknown'
    end
    if track.artist and track.artist['#text'] and #track.artist['#text'] > 0 then
        output = output .. '\nðŸ‘¤ ' .. mattata.escape_html(track.artist['#text'])
    end
    if track.album and track.album['#text'] and #track.album['#text'] > 0 then
        output = output .. '\nðŸ’¿ ' .. mattata.escape_html(track.album['#text'])
    end
    -- If available, show the album artwork.
    if track.image and track.image[3] and #track.image[3]['#text'] > 0 then
        output = '<a href="' .. mattata.escape_html(track.image[3]['#text']) .. '">' .. utf8.char(0x200c) .. '</a>' .. output
    end
    return mattata.send_message(message.chat.id, output, 'html', false)
end

return lastfm