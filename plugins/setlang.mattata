--[[
    Copyright 2017 Matthew Hesketh <wrxck0@gmail.com>
    This code is licensed under the MIT. See LICENSE for details.
]]

local setlang = {}
local mattata = require('mattata')
local redis = dofile('libs/redis.lua')
local json = require('dkjson')

function setlang:init()
    setlang.commands = mattata.commands(self.info.username):command('setlang').table
    setlang.help = '/setlang - Allows you to select your language.'
end

setlang.languages = {
    ['en_gb'] = 'British English 🇬🇧',
    ['en_us'] = 'American English 🇺🇸',
    ['de_de'] = 'Deutsch 🇩🇪',
    ['scottish'] = 'Scottish 🏴',
    ['pl_pl'] = 'Polski 🇵🇱',
    ['pt_br'] = 'Português do Brasil 🇧🇷',
    ['pt_pt'] = 'Português 🇵🇹',
    ['tr_tr'] = 'Türkçe 🇹🇷'
}

setlang.languages_short = {
    ['en_gb'] = '🇬🇧',
    ['en_us'] = '🇺🇸',
    ['de_de'] = '🇩🇪',
    ['scottish'] = '🏴',
    ['pl_pl'] = '🇵🇱',
    ['pt_br'] = '🇧🇷',
    ['pt_pt'] = '🇵🇹',
    ['tr_tr'] = '🇹🇷'
}

function setlang.get_keyboard(user_id)
    local keyboard = {
        ['inline_keyboard'] = {
            {}
        }
    }
    local total = 0
    for _, v in pairs(setlang.languages_short) do
        total = total + 1
    end
    local count = 0
    local rows = math.floor(total / 2)
    if rows ~= total then
        rows = rows + 1
    end
    local row = 1
    for k, v in pairs(setlang.languages_short) do
        count = count + 1
        if count == rows * row then
            row = row + 1
            table.insert(keyboard.inline_keyboard, {})
        end
        table.insert(keyboard.inline_keyboard[row], {
            ['text'] = v,
            ['callback_data'] = 'setlang:' .. user_id .. ':' .. k
        })
    end
    return keyboard
end

function setlang:set_lang(user_id, locale, lang, language)
    mattata.update_setting(self, user_id, 'language', locale)
    return string.format(language['setlang']['1'], lang)
end

function setlang:get_lang(user_id, language)
    local lang = mattata.get_setting(self, user_id, 'language') or 'en_gb'
    for k, v in pairs(setlang.languages) do
        if k == lang then
            lang = v
            break
        end
    end
    return string.format(language['setlang']['2'], lang)
end

function setlang:on_callback_query(callback_query, message, configuration, language)
    if not message or (message and message.date <= 1493668000) then
        return -- We don't want to process requests from messages before the language
        -- functionality was re-implemented, it could cause issues!
    end
    local user_id, new_language = callback_query.data:match('^(.-)%:(.-)$')
    if not user_id or not new_language or tostring(callback_query.from.id) ~= user_id then
        return
    end
    local output = setlang.set_lang(self, user_id, new_language, setlang.languages[new_language], language)
    local keyboard = setlang.get_keyboard(user_id)
    return mattata.edit_message_text(message.chat.id, message.message_id, output, nil, true, keyboard)
end

function setlang:on_message(message, configuration, language)
    local output = setlang.get_lang(self, message.from.id, language)
    local keyboard = setlang.get_keyboard(message.from.id)
    return mattata.send_message(message.chat.id, output, nil, true, false, nil, keyboard)
end

return setlang